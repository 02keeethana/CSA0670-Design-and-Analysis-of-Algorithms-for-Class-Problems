#include<stdio.h>
int main()
{

void floydWarshall(int dist[][])
    {
        
        int i, j, k;
         for (k = 0; k < V; k++) {
                        for (i = 0; i < V; i++) {
                
              		  for (j = 0; j < V; j++) {
                    
                    if (dist[i][k] + dist[k][j]
                        < dist[i][j])
                        dist[i][j]
                            = dist[i][k] + dist[k][j];
                }
            }
        }
 
        // Print the shortest distance matrix
        printSolution(dist);
    }
 
    void printSolution(int dist[][])
    {
        printf(
            "The following matrix shows the shortest "
            + "distances between every pair of vertices");
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (dist[i][j] == INF)
                    printf("INF ");
                else
                    printf(dist[i][j] + "   ");
            }
         }
    }
 
    
    int main()
    {
        
           final static int INF = 99999, V = 4;

        int graph[][] = { { 0, 5, INF, 10 },
                          { INF, 0, 3, INF },
                          { INF, INF, 0, 1 },
                          { INF, INF, INF, 0 } };
        AllPairShortestPath a = new AllPairShortestPath();
 
                a.floydWarshall(graph);
    
}
